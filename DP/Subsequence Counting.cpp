/**
 * @file Subsequence Counting
 * @author @dvbuiilds
 * @brief 
 * @version 0.1
 * @date 2022-05-19
 * @link https://www.codingninjas.com/codestudio/problems/subsequence-counting_3755256 @endlink
 * @copyright Copyright (c) 2022
 * 
 */
/*
We are given two strings, ‘TEXT' and ‘S’. We have to calculate the no. of subsequences 
of ‘TEXT’, which are equal to ‘S’. Since the answer can be very large print it 
modulo (10^9)+7.
A Subsequence of a string is the string that is generated by deleting 0 or more letters 
from the string and keeping the rest of the letters in the same order.
For Example:
‘TEXT’ = “brootgroot” and ‘S’ = “brt” 
Following subsequences formed by characters at given indices (1-based) of TEXT are 
counted
1 2 5
1 2 10
1 7 10
So, our output will be:
3
*/

// Recursion + Memoization.
int subsequenceCounter(vector<vector<int>>& cache, string& t, string& s, int i, int j){
	if(j<0) return 1;
	if(i<0) return 0;
	if(cache[i][j]) return cache[i][j];
	if(t[i] == s[j]){
		return cache[i][j] = subsequenceCounter(cache, t, s, i-1, j-1) + subsequenceCounter(cache, t, s, i-1, j);
	}
	return cache[i][j] = subsequenceCounter(cache, t, s, i-1, j);
}

int subsequenceCounting(string &t, string &s, int lt, int ls) {
	vector<vector<int>> cache(lt, vector<int>(ls, 0));
    return subsequenceCounter(cache, t, s, lt-1, ls-1);
} 

// Tabulation.
#define mod (int)(1e9+7)
int subsequenceCounting(string &t, string &s, int lt, int ls) {
    vector<vector<long>> table(lt+1, vector<long>(ls+1, 0));
	for(int i=0; i<=lt; ++i) table[i][0] = 1;
	
	for(int i = 1; i<= lt; ++i){
		for(int j= 1; j<=ls; ++j){
			if(t[i-1]==s[j-1]){
				table[i][j] = ((table[i-1][j-1]%mod)+(table[i-1][j]%mod))%mod;
			}
			else{
				table[i][j] = table[i-1][j];
			}
		}
	}
	return table[lt][ls];
} 